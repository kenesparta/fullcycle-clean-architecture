package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"github.com/kenesparta/fullcycle-clean-architecture/internal/dto"
	"github.com/kenesparta/fullcycle-clean-architecture/internal/infra/gql/graph"
	"github.com/kenesparta/fullcycle-clean-architecture/internal/infra/gql/graph/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(_ context.Context, input *model.OrderInput) (*model.Order, error) {
	orderIn := dto.OrderInput{
		ID:    input.ID,
		Price: input.Price,
		Tax:   input.Tax,
	}
	output, err := r.CreateOrderUseCase.Execute(orderIn)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      output.Price,
		Tax:        output.Tax,
		FinalPrice: output.FinalPrice,
	}, nil
}

func (r *queryResolver) ListOrder(_ context.Context) ([]*model.Order, error) {
	outputOrders, err := r.ListOrderUseCase.Execute()
	if err != nil {
		return nil, err
	}

	modelOrderList := make([]*model.Order, 0)
	for _, order := range outputOrders {
		modelOrderList = append(modelOrderList, &model.Order{
			ID:         order.ID,
			Price:      order.Price,
			Tax:        order.Tax,
			FinalPrice: order.FinalPrice,
		})
	}

	return modelOrderList, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
